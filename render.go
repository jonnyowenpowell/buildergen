package main

import (
	"io"
	"text/template"
)

// RenderBuilder outputs source for a type-safe builder of the struct
// provided in desc, including a package header for pkg.
//
// The source genereated by this function does not include any imports,
// and as such should be run through goimports before compilation.
func RenderBuilder(dst io.Writer, pkg string, desc StructDesc) error {
	funcs := template.FuncMap{
		"exp":   FirstToUpper,
		"unexp": FirstToLower,
	}

	data := TemplateData{
		Package:                    pkg,
		Struct:                     desc,
		PartialBuilderTypeSuffixes: PartialBuilderTypeSuffixes(desc),
		BuildFuncReceiverSuffixes:  BuildFuncReceiverSuffixes(desc),
		WithFuncs:                  WithFuncs(desc),
	}

	t := template.Must(template.New("t").Funcs(funcs).Parse(builderTemplate))
	return t.Execute(dst, data)
}

type TemplateData struct {
	Package                    string
	Struct                     StructDesc
	PartialBuilderTypeSuffixes []string
	BuildFuncReceiverSuffixes  []string
	WithFuncs                  []WithFuncDesc
}

type WithFuncDesc struct {
	FieldName, FieldType         string
	ReceiverSuffix, ReturnSuffix string
}

const builderTemplate string = `// Code generated by buildergen DO NOT EDIT.

package {{ .Package }}

func New{{ exp .Struct.Name }}Builder() *{{ unexp .Struct.Name }}Builder {
	return new({{ unexp .Struct.Name }}Builder)
}

type {{ unexp .Struct.Name }}Builder struct {
	{{- range .Struct.Fields }}
	{{ unexp .Name }} {{ .Type }}
	{{- end }}
}

type (
	{{- range .PartialBuilderTypeSuffixes }}
	{{ unexp $.Struct.Name }}Builder{{ . }} {{ unexp $.Struct.Name }}Builder
	{{- end }}
)

func (bl *{{ unexp .Struct.Name }}Builder) build() *{{ .Struct.Name }} {
	return &{{ .Struct.Name }}{
		{{- range .Struct.Fields }}
		{{ .Name }}: bl.{{ unexp .Name }},
		{{- end }}
	}
}
{{ range .BuildFuncReceiverSuffixes }}
func (bl *{{ unexp $.Struct.Name }}Builder{{ . }}) Build() *{{ $.Struct.Name }} {
	return (*{{ unexp $.Struct.Name }}Builder)(bl).build()
}
{{ end -}}

{{- range .Struct.Fields }}
func (bl *{{ unexp $.Struct.Name }}Builder) with{{ exp .Name }}(v {{ .Type }}) *{{ unexp $.Struct.Name }}Builder {
	bl.{{ unexp .Name }} = v
	return bl
}
{{ end -}}

{{- range .WithFuncs }}
func (bl *{{ unexp $.Struct.Name }}Builder{{ .ReceiverSuffix }}) With{{ exp .FieldName }}(v {{ .FieldType }}) *{{ unexp $.Struct.Name }}Builder{{ .ReturnSuffix }} {
	b := (*{{ unexp $.Struct.Name }}Builder)(bl).with{{ exp .FieldName }}(v)
	return (*xBuilder{{ .ReturnSuffix }})(b)
}
{{ end -}}
`
